generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(255)
  category          String             @db.VarChar(100)
  goals             Goal[]
  routineExercises  RoutineExercise[]
  sets              Set[]
}

model Goal {
  id            Int       @id @default(autoincrement())
  userId        Int?
  exerciseId    Int?
  targetWeight  Decimal?  @db.Decimal(5, 2)
  targetSets    Int?
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  exercise      Exercise? @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model RoutineExercise {
  routineId   Int
  exerciseId  Int
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  routine     Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([routineId, exerciseId])
}

model Routine {
  id                Int                @id @default(autoincrement())
  userId            Int?
  category          String             @db.VarChar(100)
  name              String             @db.VarChar(255)
  description       String?
  createdAt         DateTime?          @default(now()) @db.Timestamp(6)
  routineExercises  RoutineExercise[]
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  favoriteRoutine FavoriteRoutine[]
}

model Set {
  id           Int       @id @default(autoincrement())
  userId       Int?
  exerciseId   Int?
  weight       Decimal   @db.Decimal(5, 2)
  repetitions  Int
  feeling      String?   @db.VarChar(50)
  performedAt  DateTime? @default(now()) @db.Timestamp(6)
  exercise     Exercise? @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  email      String    @unique @db.VarChar(255)
  password   String
  height     Decimal?  @db.Decimal(5, 2)
  weight     Decimal?  @db.Decimal(5, 2)
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  goals      Goal[]
  routines   Routine[]
  sets       Set[]

  favoriteRoutine FavoriteRoutine[]
}

model FavoriteRoutine {
  userId    Int
  routineId Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@id([userId, routineId])
}